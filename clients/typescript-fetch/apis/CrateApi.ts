/* tslint:disable */
/* eslint-disable */
/**
 * notifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddEmailChannelBody,
  AddTelegramChannelBody,
  SendNotificationBody,
} from '../models';
import {
    AddEmailChannelBodyFromJSON,
    AddEmailChannelBodyToJSON,
    AddTelegramChannelBodyFromJSON,
    AddTelegramChannelBodyToJSON,
    SendNotificationBodyFromJSON,
    SendNotificationBodyToJSON,
} from '../models';

export interface HandleAddEmailChannelRequest {
    addEmailChannelBody: AddEmailChannelBody;
}

export interface HandleAddTelegramChannelRequest {
    addTelegramChannelBody: AddTelegramChannelBody;
}

export interface HandleSendNotificationRequest {
    sendNotificationBody: SendNotificationBody;
}

/**
 * 
 */
export class CrateApi extends runtime.BaseAPI {

    /**
     * Add email channel  Add email notification channel for user 
     * Add email channel
     */
    async handleAddEmailChannelRaw(requestParameters: HandleAddEmailChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addEmailChannelBody === null || requestParameters.addEmailChannelBody === undefined) {
            throw new runtime.RequiredError('addEmailChannelBody','Required parameter requestParameters.addEmailChannelBody was null or undefined when calling handleAddEmailChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/add_channel/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddEmailChannelBodyToJSON(requestParameters.addEmailChannelBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add email channel  Add email notification channel for user 
     * Add email channel
     */
    async handleAddEmailChannel(requestParameters: HandleAddEmailChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleAddEmailChannelRaw(requestParameters, initOverrides);
    }

    /**
     * Add telegram channel  Add telegram notification channel for user 
     * Add telegram channel
     */
    async handleAddTelegramChannelRaw(requestParameters: HandleAddTelegramChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addTelegramChannelBody === null || requestParameters.addTelegramChannelBody === undefined) {
            throw new runtime.RequiredError('addTelegramChannelBody','Required parameter requestParameters.addTelegramChannelBody was null or undefined when calling handleAddTelegramChannel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/add_channel/telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTelegramChannelBodyToJSON(requestParameters.addTelegramChannelBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add telegram channel  Add telegram notification channel for user 
     * Add telegram channel
     */
    async handleAddTelegramChannel(requestParameters: HandleAddTelegramChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleAddTelegramChannelRaw(requestParameters, initOverrides);
    }

    /**
     * Send notification  send notification to user with given id on all channels registered for that user 
     * Send notification
     */
    async handleSendNotificationRaw(requestParameters: HandleSendNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sendNotificationBody === null || requestParameters.sendNotificationBody === undefined) {
            throw new runtime.RequiredError('sendNotificationBody','Required parameter requestParameters.sendNotificationBody was null or undefined when calling handleSendNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/notify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendNotificationBodyToJSON(requestParameters.sendNotificationBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send notification  send notification to user with given id on all channels registered for that user 
     * Send notification
     */
    async handleSendNotification(requestParameters: HandleSendNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleSendNotificationRaw(requestParameters, initOverrides);
    }

}
